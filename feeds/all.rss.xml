<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Aiyana Brooks</title><link>https://aiyanabrooks.com/</link><description></description><lastBuildDate>Fri, 03 Apr 2020 16:30:00 -0400</lastBuildDate><item><title>5 Minute Pelican Quickstart</title><link>https://aiyanabrooks.com/5-minute-pelican-quickstart.html</link><description>&lt;p&gt;&lt;span class="lead"&gt;Get started with Pelican in 5 minutes or less. By the end of this post, you will be able to install pelican and generate a very simple site on your local environment.&lt;/span&gt;&lt;/p&gt;
&lt;div class="section" id="what-is-pelican"&gt;
&lt;h2&gt;&lt;span class="text-primary"&gt;What is Pelican?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Pelican is a static site generator written in Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-get-started"&gt;
&lt;h2&gt;&lt;span class="text-primary"&gt;How can I get started?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Getting started with Pelican is extremely easy.&lt;/p&gt;
&lt;p&gt;Make sure you have a python environment already setup. If you do not, you can easily work in the cloud using CloudAnywhere  - nothing to install, simply create a free account on Cloud Anywhere to get started. Create a new Container. Choose the python stack which already has pip, pyenv, and virtualenv preinstalled. You can choose between Ubuntu or Centos.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Create a virtual environment and install pelican.&lt;/strong&gt; I like to keep all of my virtual environments in a separate &amp;quot;envs&amp;quot; directory, so that I can easily see how many virtual environments I have on my system. Below are the commands that I ran to set up my virtual environment and install pelican. &lt;em&gt;Note, that after creating a virtual environment using pip, it is always a good idea to update your pip, as the version in your virtual env might not be the most up-to-date (regardless of the pip version in your main python installation).&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt; mkdir envs
&amp;gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; envs
&amp;gt;&amp;gt; python -m venv mysite
&amp;gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&amp;gt;&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; envs/mysite/bin/activate
&amp;gt;&amp;gt; pip install pip --upgrade
&amp;gt;&amp;gt; pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;&lt;strong&gt;Create a project and quickstart your site.&lt;/strong&gt; Pelican comes with a handy command-line tool that will enable you to quickly set up your site by answering a few questions. You will need to create a directory that will house your site and cd into that directory. Then run the &amp;quot;pelican-quickstart&amp;quot; command.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt; mkdir mysite
&amp;gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; mysite
&amp;gt;&amp;gt; pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For most of these, it is fine to leave the defaults or to simply choose &amp;quot;no&amp;quot;. You will learn more about customization later, but for now, our goal is to simply and quickly get a site up and running. The main two items to focus on are: (question 2) &lt;em&gt;What will be the title of this website?&lt;/em&gt; and (question 3) &lt;em&gt;Who will be the author of this website?&lt;/em&gt;&lt;/p&gt;
&lt;img alt="Pelican Quickstart screenshot" src="../images/pelican-quickstart.png" /&gt;
&lt;p&gt;&lt;br /&gt;
That command will create two empty directories -- content and output -- and create two python files -- pelicanconf.py and publishconf.py. Your directory structure now look similar to below:&lt;/p&gt;
&lt;img alt="Pelican directory after quickstart" src="../images/pelican-directory-structure-1.png" /&gt;
&lt;p&gt;&lt;br /&gt;
Below is the generated pelicanconf.py file.&lt;/p&gt;
&lt;img alt="pelicanconf.py" src="../images/pelican-conf-file.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;strong&gt;Create some content.&lt;/strong&gt; Pelican enables you to write your content using either reStructuredText or Markdown. In order to use Markdown, you will need install the markdown library for python. For this example, I will use reStructuredText since it is supported out-of-the-box.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; content
&amp;gt;&amp;gt; vi article.rst
&amp;gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Article in restructuredText" src="../images/pelican-first-article.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;strong&gt;Generate your content.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt; pelican content
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;&lt;strong&gt;Preview your site.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; output
&amp;gt;&amp;gt; python -m http.server
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Barebones site" src="../images/pelican-initial-site-screenshot.png" /&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Fri, 03 Apr 2020 16:30:00 -0400</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2020-04-03:/5-minute-pelican-quickstart.html</guid><category>blog</category><category>pelican</category></item><item><title>Recurse Center</title><link>https://aiyanabrooks.com/recurse-center.html</link><description>&lt;p&gt;&lt;span class="lead"&gt;In January, I took a step toward reinvigorating my journey as a developer by joining The Recurse Center.&lt;/span&gt;&lt;/p&gt;
&lt;div class="section" id="what-is-the-recurse-center"&gt;
&lt;h2&gt;WHAT IS THE RECURSE CENTER?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is &lt;em&gt;NOT&lt;/em&gt; a school&lt;/li&gt;
&lt;li&gt;It is &lt;em&gt;NOT&lt;/em&gt; a bootcamp&lt;/li&gt;
&lt;li&gt;It is &lt;em&gt;NOT&lt;/em&gt; an internship or apprenticeship&lt;/li&gt;
&lt;li&gt;There are no teachers, classes, tests, midterms, assignments, or deadlines &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There are no bosses, supervisors, managers, evaluations, or performance reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="lead"&gt;&amp;quot;The Recurse Center is a self-directed, community-driven educational retreat for programmers in New York City.&amp;quot;&lt;/span&gt;
&lt;a class="reference external" href="https://www.recurse.com/"&gt;The Recurse Center&lt;/a&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-break-that-definition-down-a-bit"&gt;
&lt;h3&gt;&lt;span class="text-warning"&gt;Let's break that definition down a bit&lt;/span&gt;&lt;/h3&gt;
&lt;div class="section" id="self-directed"&gt;
&lt;h4&gt;&lt;strong&gt;self-directed&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;At the Recurse Center, people decide for themselves how they want to spend their time.
Attendees (called Recursers) choose &lt;em&gt;what&lt;/em&gt; to work on, &lt;em&gt;when&lt;/em&gt; to work, and for &lt;em&gt;how long&lt;/em&gt;.
Recursers decide &lt;em&gt;for themselves&lt;/em&gt; when a project has reached completion.
Recrusers decide when their &lt;em&gt;personal objectives&lt;/em&gt; have been met.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="community-driven"&gt;
&lt;h4&gt;&lt;strong&gt;community-driven&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;All of the activites that occur at the Recurse Center (RC) are initiated, coordinated, and facilitated by attendees of the retreat. Any recurser is welcome to create a new event for the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="educational-retreat"&gt;
&lt;h4&gt;&lt;strong&gt;educational-retreat&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Everyone at Recurse is there because they want to learn. Recursers set their own syllabus and milestones. They can choose to work with others or to work independently.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-attend-the-recurse-center"&gt;
&lt;h2&gt;WHY ATTEND THE RECURSE CENTER?&lt;/h2&gt;
&lt;p&gt;Recursers attend for various reasons.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unlike a bootcamp, school, internship, or other structured program, Recurse gives attendess to freedom to pursue their own interests&lt;/li&gt;
&lt;li&gt;Some Recursers attend to work on a specific project&lt;/li&gt;
&lt;li&gt;Some Recursers attend to get inspired for an idea for their next project&lt;/li&gt;
&lt;li&gt;Many recursers look forward to finding other developers excited about technology &lt;em&gt;[x]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class="lead"&gt;I attended the Recurse Center because I wanted to be around other people excited about technology, I wanted to learn more about web development and data analystics using python, and I wanted to get back into the habit of coding daily.&lt;/span&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In actuality, everyone at Recurse is both a teacher and a student. We are all experts at something and beginners at something else.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Mon, 17 Feb 2020 18:56:00 -0500</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2020-02-17:/recurse-center.html</guid><category>blog</category><category>recurse</category></item><item><title>Corpus Tool</title><link>https://aiyanabrooks.com/corpus-tool.html</link><description>&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Using this tool, students and faculty (with access) would upload student papers to the database; then researchers could download
papers meeting certain criteria in order to create a corpus. (A corpus is a collection of texts that have some commonality; a corpus
is usually used to demonstrate some aspect of language.) The papers uploaded would be passed through a de-identification process so that any
personally identifiable information (such as a student's Name) would be removed. In addition, each paper would be passed through a tagging
process, so that certain characteristics about the writer (e.g. nationality, first language, age range) are associated with the paper.
This would enable a researcher to collect papers meeting specific criteria (e.g. All papers where the author's first language was Russian),
and these papers could then be analyzed.&lt;/p&gt;
&lt;p&gt;The code described here is a very early (unfinished) prototype.&lt;/p&gt;
&lt;p&gt;This code lives in a &lt;a class="reference external" href="https://bitbucket.org/ariesunique/baruchcorpus/src/master/"&gt;BitBucket repository&lt;/a&gt; and is
live on the &lt;a class="reference external" href="https://corpus-aunique.herokuapp.com/"&gt;Heroku platform&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;To access the database, users will need a login.&lt;/p&gt;
&lt;img alt="Corpus login page" src="../images/corpus-login.png" /&gt;
&lt;p&gt;There are several levels of access.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Students can upload their papers to the corpus, but cannot query the corpus (To login use tren:Welcome1).&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Student access" src="../images/corpus-limited-access-student.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Teachers can query the corpus, but cannot upload papers (To login use teacher:teacher).&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Teacher access" src="../images/corpus-limited-access.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Admins can upload papers and perform queries (To login use admin:admin).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are two options for adding papers to the corpus. You can add the full text directly into the text field, or you can upload a docx.&lt;/p&gt;
&lt;p&gt;When a student uploads a paper, the tool will search the paper for any references to that student's name and will replace these with {{Name}}.
This is a very primitive, first attempt to de-identify the student data. If an admin uploads a paper, then the admin must first select
the name of the student who authored the paper so that the tool knows how to deidentify the student.
The tool will also count the number of words.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The proposed workflow for this tool would have been as follows:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Students upload their papers to the corpus.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Student upload page" src="../images/corpus-student-upload.png" /&gt;
&lt;p&gt;Before a student can use the tool, a login would need to be created for them.
Additionally, the user would need to be associated with the appropriate demographic data, which could potentially be obtained
from the registration office, and bulk-loaded into the system using a sql script.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Researchers/Teachers can query the corpus using demographic data (e.g. find all papers written by first-language Chinese speakers)
or using words and phrases (e.g. find all papers containing the phrase, &amp;quot;for your consideration&amp;quot;).&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Student upload page" src="../images/corpus-list-with-highlighting.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;The researcher can download the text versions of selected papers as a zip file and use a more advanced tool,
such as &lt;a class="reference external" href="https://www.laurenceanthony.net/software/antconc/"&gt;AntConc&lt;/a&gt;, to do analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Student upload page" src="../images/corpus-download.png" /&gt;
&lt;p&gt;This is a very early prototype so it does not have all of the functions that the production-ready version would have.
(For example, the query feature is not implemented. Also, we would need to decide exactly what demographic data
we need to collect - country, language, etc. This tool uses a very small set of characteristics.)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-learned"&gt;
&lt;h2&gt;What I Learned&lt;/h2&gt;
&lt;p&gt;This was a fun project because it was my first time deploying my own project to Heroku. I also had full control over every aspect
of the project, so I had to design the database schema, the UI, configuration options, etc.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Fri, 01 Nov 2019 22:45:00 -0400</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2019-11-01:/corpus-tool.html</guid><category>blog</category><category>flask</category></item><item><title>Site Word Counter</title><link>https://aiyanabrooks.com/site-word-counter.html</link><description>&lt;p&gt;I followed this tutorial (&lt;a class="reference external" href="https://www.bogotobogo.com/python/Flask/Python_Flask_App_1_Word_Count_Postgres_SQLAlchemy.php"&gt;part 1&lt;/a&gt;
and &lt;a class="reference external" href="https://www.bogotobogo.com/python/Flask/Python_Flask_App_2_BeautifulSoup_NLTK_Gunicorn_PM2_Apache.php"&gt;part 2&lt;/a&gt;)
and deployed the code to heroku (Application is live &lt;a class="reference external" href="https://wordcount-stage-aunique.herokuapp.com/"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This was a fun project because it uses Flask, Beautiful Soup and NLTK. The user enters a url
and the code fetches the content from that url and returns an alphabetical list of the words
used on that page, as well as a count for each word. The code uses requests to fetch the content from the url,
BeautifulSoup to parse the content and remove the html tags, and NLTK to count the words.&lt;/p&gt;
&lt;p&gt;Unfortunately, I did not upload the code to GitHub or BitBucket before my main computer crashed, but I did manage to deploy it to Heroku.&lt;/p&gt;
&lt;p&gt;Below are screenshots of the application. As a test, I put in the &lt;a class="reference external" href="pages/about.html"&gt;About page&lt;/a&gt; from this website.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Home screen on the WordCount application&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Wordcount Home screen" src="../images/wordcount-home.png" /&gt;
&lt;p&gt;&lt;strong&gt;Word frequencies for https://aiyanabrooks.com/pages/about.html&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Wordcount results" src="../images/wordcount-results.png" /&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Thu, 31 Oct 2019 14:29:00 -0400</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2019-10-31:/site-word-counter.html</guid><category>blog</category><category>projects</category><category>flask</category><category>nltk</category></item><item><title>SPELL Attendance Tracker</title><link>https://aiyanabrooks.com/attendance-tracker.html</link><description>&lt;p&gt;For a while I was teaching English at a community program called SPELL.
The program required us to turn in paper attendance sheets each week.
For my first Flask project, I wanted to create an online attendance tool for
teachers to more easily track and turn in their attendance. I used Bootstrap for
the UI and mysql for the database. After completing the initial screens,
I decided to refactor the project and start again (see &lt;a class="reference internal" href="#take-2"&gt;Take 2&lt;/a&gt;). Both versions of the code
are written in Python 2.7 which has since been deprecated. This code never went live,
but it was a good learning experience.&lt;/p&gt;
&lt;div class="section" id="take-1"&gt;
&lt;h2&gt;Take 1&lt;/h2&gt;
&lt;p&gt;This code lives in a &lt;a class="reference external" href="https://bitbucket.org/ariesunique/speller/src/master/"&gt;Bitbucket repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/index - This is the index/ Welcome page&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Index page" src="../images/Spell-index.png" /&gt;
&lt;p&gt;&lt;strong&gt;/register - Enable users to register&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Register page" src="../images/Spell-register.png" /&gt;
&lt;p&gt;&lt;strong&gt;/login - Standard Login Page&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Login page" src="../images/Spell-login.png" /&gt;
&lt;p&gt;&lt;strong&gt;/login - After a new user registers, he is redirected to the login page.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Login page after redirect" src="../images/Spell-login-redirect.png" /&gt;
&lt;p&gt;&lt;strong&gt;/dashboard - There was supposed to be more to this screen, but I decided to refactor
the project and start from scratch.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Empty Dashboard page" src="../images/Spell-dashboard.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="take-2"&gt;
&lt;h2&gt;Take 2&lt;/h2&gt;
&lt;p&gt;This code lives in a BitBucket repository called &lt;a class="reference external" href="https://bitbucket.org/ariesunique/spelldemo/src"&gt;SpellDemo&lt;/a&gt;
For this second attempt, I used a different Bootstrap theme that was less bright, and I simplified the
code base. In the first attempt, I had tried to use blueprints and the codebase became confusing. This second trial,
I decided it was better to start simple, and refactor later, if needed.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/login - Standard Login Page&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Standard Login page" src="../images/spelldemo-login.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/logout redirects back to the Login page with a message to the user that he has successfully logged out&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Login page after redirect from logout" src="../images/spelldemo-logout-redirect.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/dashboard - Admin dashboard&lt;/strong&gt;
SPELL is a community program that recurs twice each year for 12 weeks each semester.
The idea behind this screen is that the administrator of the program would set the current
semester of the program (ie, Winter 2016, Fall 2016), and enter the names of enrolled
students and assign them to classes.&lt;/p&gt;
&lt;img alt="Admin Dashboard" src="../images/spelldemo-admin-dashboard.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/attendance - Morning attendance tab&lt;/strong&gt;
Teachers in SPELL teach two classes - one in the morning and one in the afternoon.
This attendance page enables teachers to enter attendance for both their classes.
The page uses javascript and Bootstrap to provide a tab navigation so teacher can easily
toggle between morning and afternoon attendance for that day. The teacher chooses
a date first and is shown a list of all the students in his morning and afternoon classes.
The teacher can use the radio buttons to mark the attendance accordingly, and optionally
can enter a comment.&lt;/p&gt;
&lt;img alt="Morning attendance page" src="../images/spelldemo-attendance-morning.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/attendance - Afternoon attendance tab&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Afternoon attendance page" src="../images/spelldemo-attendance-afternoon.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/students - List of students in this teacher's class&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Student list page" src="../images/spelldemo-students-list.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/student/add - Add student&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Add student page" src="../images/spelldemo-students-add.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;/student/edit/{id} - Edit student&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Edit student page" src="../images/spelldemo-students-edit.png" /&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Thu, 31 Oct 2019 09:20:00 -0400</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2019-10-31:/attendance-tracker.html</guid><category>blog</category><category>projects</category><category>flask</category></item><item><title>Stock Tracker</title><link>https://aiyanabrooks.com/stock-tracker.html</link><description>&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;A simple command line interface to look up the stock quote of a given stock symbol&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Usage&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt; stocktracker GOOG

Here are the stock prices on &lt;span class="m"&gt;2019&lt;/span&gt;-10-27:

Stock      &lt;span class="nv"&gt;Quote&lt;/span&gt;
&lt;span class="o"&gt;=========================&lt;/span&gt;
GOOG       &lt;span class="m"&gt;1265&lt;/span&gt;.1300

&amp;gt;&amp;gt; stocktracker GOOG AAPL FB

Here are the stock prices on &lt;span class="m"&gt;2019&lt;/span&gt;-10-27:

Stock      &lt;span class="nv"&gt;Quote&lt;/span&gt;
&lt;span class="o"&gt;=========================&lt;/span&gt;
GOOG       &lt;span class="m"&gt;1265&lt;/span&gt;.1300
AAPL       &lt;span class="m"&gt;246&lt;/span&gt;.5800
FB         &lt;span class="m"&gt;187&lt;/span&gt;.8900

&amp;gt;&amp;gt; stocktracker -a GOOG AAPL FB

Here are the stock prices on &lt;span class="m"&gt;2019&lt;/span&gt;-10-27:

Stock      &lt;span class="nv"&gt;Quote&lt;/span&gt;
&lt;span class="o"&gt;=========================&lt;/span&gt;
AAPL       &lt;span class="m"&gt;246&lt;/span&gt;.5800
FB         &lt;span class="m"&gt;187&lt;/span&gt;.8900
GOOG       &lt;span class="m"&gt;1265&lt;/span&gt;.1300
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Full &lt;a class="reference external" href="https://github.com/ariesunique/30-day-project-challenge/tree/master/stocktracker"&gt;source code&lt;/a&gt; in GitHub&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-learned"&gt;
&lt;h2&gt;What I Learned&lt;/h2&gt;
&lt;p&gt;I only worked on this for about 5 consecutive days in short bursts (but this could easily have been done in an hour or two on a single day). I chose this project because I like command-line interfaces and I wanted to work more with the Click library.&lt;/p&gt;
&lt;p&gt;The first step was to figure out how I would get the stock quotes. I found a nice site with a free API for this purpose - alphavantage. I signed up for a free API key and added this to my config file. I’m using configparser to read the config file. To make this into a true CLI, I added a setup.py file (so the code can be called with a simple command instead of having to type the “python” command to run this).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assessment"&gt;
&lt;h2&gt;Assessment&lt;/h2&gt;
&lt;p&gt;I learned more about Click and ConfigParser, and how to create a setup.py file.
There is a lot more that could be added to make this more robust, but it works well enough as a simple CLI proof-of-concept. This was a fun little project and I plan to use Click again for future CLI tools.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Thu, 04 Apr 2019 08:21:00 -0400</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2019-04-04:/stock-tracker.html</guid><category>blog</category><category>30-day-project-challenge</category></item><item><title>30 DAY PROJECT CHALLENGE</title><link>https://aiyanabrooks.com/30-day-project-challenge.html</link><description>&lt;div class="section" id="what-is-it"&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;30 Day Project Challenge&lt;/strong&gt; is my commitment to working on a project of my choosing daily for 30 days. At the end of this time period, I will do a self-assessment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-do-it"&gt;
&lt;h2&gt;Why do it?&lt;/h2&gt;
&lt;p&gt;There are two pieces of advice I often hear given to developers interested in picking up a new skill:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Work on something real&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Choose a real project (something that interests you). Doing tutorials is fun, but the real learning happens when you are forced to figure things out for yourself.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Work incrementally&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;No one can train for a marathon in a single day. The way to climb a mountain is one step at a time. One of my favorite authors and one of the most prolific writers of all time, Stephen King, maintains the habit of writing daily for a set time period each day.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This challenge fulfills both of those goals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-will-it-work"&gt;
&lt;h2&gt;How will it work?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I must create my own project. While I can use tutorials to assist, the goal is to develop my own thing, not just blindly follow tutorials.&lt;/li&gt;
&lt;li&gt;I must commit to working on this every day for at least 20 minutes (barring some sort of emergency).&lt;/li&gt;
&lt;li&gt;At the end of the 30 days, I will evaluate my progress, and then &lt;em&gt;move on to a new project&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The self-assessment must answer the following questions:&lt;ol class="loweralpha"&gt;
&lt;li&gt;What did you learn?&lt;/li&gt;
&lt;li&gt;How far did you get?&lt;/li&gt;
&lt;li&gt;What were the roadblocks?&lt;/li&gt;
&lt;li&gt;What would you do differently?&lt;/li&gt;
&lt;li&gt;How do you feel about what you accomplished?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="why-30-days"&gt;
&lt;h3&gt;Why 30 days?&lt;/h3&gt;
&lt;p&gt;This is key - this ensures that my learning doesn't stall. It is very easy to get stuck on a problem and feel unwilling to start anything new until the roadblock is solved. By setting the 30-day limit, I remain focused on the &lt;strong&gt;process&lt;/strong&gt; of learning, rather than on the &lt;strong&gt;result&lt;/strong&gt; (after all, I'm not trying to reinvent the wheel).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-get-started"&gt;
&lt;h2&gt;Let's get started?&lt;/h2&gt;
&lt;p&gt;I will be using this blog to keep track of my learning journey. Stay Tuned!!!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aiyana</dc:creator><pubDate>Mon, 01 Apr 2019 17:20:00 -0400</pubDate><guid isPermaLink="false">tag:aiyanabrooks.com,2019-04-01:/30-day-project-challenge.html</guid><category>blog</category><category>30-day-project-challenge</category></item></channel></rss>